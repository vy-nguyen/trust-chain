peer {
    # Private key of the peer
    # The key is generated by default on the first run and stored in the database folder
    #
    privateKey = 5fcbd52d4b81ca0cb5ed82fa915553d646244ff2ccc8f0dd91101868f7003424
}

database {
    # Place to save physical storage files can be either absolute or relative path
    #
    dir = /Users/work/ws/data

    # every time the application starts the existing database will be destroyed and
    # all the data will be downloaded from peers again [true/false]
    #
    reset = false

    # If reset=true, every time the application starts the database will reset itself
    # to this block number and sync again from there.
    # Set to 0 for a 'full' reset.
    resetBlock = 0

    # Handling incompatible database version:
    #  * EXIT   - (default) show error in std out and exit by throwing Error
    #  * RESET  - clear database directory and continue working
    #  * IGNORE - continue working regardless possible issues
    # @since 1.4.0
    #
    incompatibleDatabaseBehavior = EXIT

    # Controls state database pruning
    # pruned state consumes much less disk space (e.g. 50G full and 1G pruned)
    # but the state can be restored only within last [maxDepth] blocks, all older
    # states are lost
    #
    prune {
        enabled = true

        # Controls how much last block states are not pruned
        # it is not recommneded to set this value below 192
        # as it can prevent rebranching from long fork chains
        #
        maxDepth = 192
    }
}

# Cache settings
#
cache {
    flush {
        # Size in Mbytes of the write buffer for all datasources
        # (state, blocks, transactions) data is flushed to DB when write caches
        # size exceeds this limit value < 0 disables this option
        #
        writeCacheSize = 64

        # Force data flush each N blocks [10000 flush each 10000 blocks]
        # value 0 disables this option
        #
        blocks = 0

        # Flush each block after full (long) sync complete
        #
        shortSyncFlush = true
    }

    # Total size in Mbytes of the state DB read cache
    #
    stateCacheSize = 256

    # The size of block queue cache to be imported in MBytes
    #
    blockQueueSize = 32

    # The size of header queue cache during import in MBytes
    #
    headerQueueSize = 8

    # Maximum size (in Mb) the state bloom fiter can grow up to when reaching this
    # threshold the bloom filter is turned off forever 128M can manage approx up to
    # 50M of db entries
    #
    maxStateBloomSize = 128
}

# eth sync process
sync {
    # Block chain synchronization can be: [true/false]
    #
    enabled = true

    # Fast sync options
    #
    fast {
        # Enables/disables fastsync when enabling make sure the global sync option
        # is enabled ('sync.enabled')
        #
        enabled = false

        # When specified the fastsync retrieves the state for this block
        # This is the fast and secure option to do fastsync
        # If not specified the block is selected like [peerBestBlockNumber - 1000]
        #
        # pivotBlockHash = 
    }

    # Minimal peers count used in sync process sync may use more peers
    # than this value but will try to get at least this many from discovery
    #
    peer.count = 1

    # Uncomment this param to use a strict Eth version.  Useful for testing
    #
    # version = 62

    # Exit if we receive a block that causes state conflict this option is
    # mainly for debugging purposes
    #
    exitOnBlockConflict = false
}

# Solidity options
#
solc {
    # Full path to solc executable
    # If path is not provided, bundled Solidity Compiler is used
    #
    path = null
}

# ========================================================
#    Debug and advanced options
# ========================================================

# The time we wait to the network to approve the transaction, the
# transaction got approved when include into a transactions msg
# retrieved from the peer [seconds] transaction.approve.timeout = 15

# The number of blocks that should pass before a pending transaction is removed
#
transaction.outdated.threshold = 10

dump {
    # For testing purposes all the state will be dumped in JSON form to [dump.dir]
    # if [dump.full] = true possible values [true/false]
    #
    full = false
    dir = dump

    # This defines the vmtrace dump to the console and the style
    # -1 for no block trace styles: [pretty/standard+] (default: standard+)
    #
    block = -1
    style = pretty

    # Clean the dump dir each start
    #
    clean.on.restart = true
}

# Structured trace is the trace being collected in the form of objects and
# exposed to the user in json or any other convenient form.
#
vm.structured {
    trace = false
    dir = vmtrace
    compressed = true
    initStorageLimit = 10000
}

# Make changes to tracing options starting from certain block
# -1 don't make any tracing changes
#
trace.startblock = -1

# Enables/disables internal transactions data record a single
# transaction can potentially collect large amount of call data
# (especially in tests) so there is an option to disable it
#
record.internal.transactions.data = true

# Invoke vm program on message received, if the vm is not invoked
# the balance transfer occurs anyway  [true/false]
#
play.vm = true

# Hello phrase will be included in the hello message of the peer
#
hello.phrase = Dev

# This property used mostly for debug purposes so if you don't know
# exactly how to apply it, leave it as [-1]
#
# ADVANCED: if we want to load a root hash
# for db not from the saved block chain (last block)
# but any manual hash this property will help.
# values [-1] - load from db
#        [hex hash 32 bytes] root hash
#
root.hash.start = null

# Key value data source values: [leveldb/inmem]
#
keyvalue.datasource = leveldb

record.blocks = false
blockchain.only = false

# Load the blocks from a rlp lines file and not for the net
#
blocks.loader = ""

# Crypto settings, such as sign, hash, etc
#
crypto {
	# JCA cryptoprovider name. 
    #
	providerName="SC"

	# Used for create JCA MessageDigest
    #
	hash.alg256="ETH-KECCAK-256"
	hash.alg512="ETH-KECCAK-512"
}

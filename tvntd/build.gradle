buildscript {
    ext {
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.10.RELEASE")
        classpath("com.google.protobuf:protobuf-gradle-plugin:0.8.0")
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'application'
apply plugin: 'com.google.protobuf'

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        url "http://dl.bintray.com/ethereum/maven"
    }
}

ext.maxHeapSize = '-Xmx1500m'

applicationDefaultJvmArgs = [
    "-Dsync.fast.enabled=true",
    "-Dlogback.configurationFile=src/main/resources/logback.xml"
]

configurations.all {
    // Check for updates every build
    //
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-websocket")
    compile("org.springframework.boot:spring-boot-starter-jetty:2.0.0.RELEASE")
    compile("org.springframework.boot:spring-boot-starter-data-jpa:2.0.0.RELEASE")

    compile("org.springframework.boot:spring-boot-starter-web:2.0.0.RELEASE") {
        exclude module: "spring-boot-starter-tomcat"
    }

    compile("org.springframework.security:spring-security-web:4.2.4.RELEASE")
    compile("org.springframework.security:spring-security-config:4.2.4.RELEASE")

    compile("mysql:mysql-connector-java:${mysql_connector_java_ver}")
    compile("org.hibernate:hibernate-core:${hibernate_version}")

    compile("org.eclipse.persistence:javax.persistence:2.1.0")
    compile("javax.validation:validation-api:2.0.0.Final")

    compile("org.jsoup:jsoup:1.8.3")
    compile("com.google.guava:guava:18.0")
    compile("com.google.protobuf:protobuf-java:${protobuf_version}")
    compile("com.github.briandilley.jsonrpc4j:jsonrpc4j:1.5.2")

    compile("org.ethereum:solcJ-all:0.4.8")
    compile(project(":ethereumj/ethereumj-core")) {
        exclude group: "log4j"
        exclude group: "org.slf4j", module: "log4j-over-slf4j"
        exclude group: "org.slf4j", module: "slf4j-log4j12"
        exclude group: "org.ethereum", module: "solcJ-all"
    }
    compile files(new File(project.rootDir,
        "/ethereumj/ethereumj-core/build/libs/ethereumj-core-1.6.3-SNAPSHOT.jar"))
}

sourceSets {
    main {
        proto {
            srcDirs = [
                'src/main/proto'
            ]
        }
        java {
            srcDirs = [
                'src/main/java'
            ]
            exclude 'com/tvntd/mine/**'
        }
        resources {
            srcDirs = [
                'src/main/resources'
            ]
            exclude 'src/mine/resources'
        }
    }
    miner {
        compileClasspath += main.output + main.compileClasspath
        java {
            srcDirs = [
                'src/mine/java'
            ]
            exclude 'com/tvntd/trustchain/config/**'
            exclude 'com/tvntd/trustchain/plugin/**'
        }
        resources {
            srcDirs = [
                'src/mine/resources'
            ]
            exclude 'src/main/resources'
        }
    }
    test {
        compileClasspath += main.output + main.compileClasspath
        compileClasspath += miner.output + miner.compileClasspath
        runtimeClasspath += main.output + main.compileClasspath
        runtimeClasspath += miner.output + miner.compileClasspath

    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobuf_version}"
    }
    generateProtoTasks.generatedFilesBaseDir = "${buildDir}/generated"
    generateProtoTasks {
        all().each { task -> }
        ofSourceSet('main')
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
}

task stage {
    dependsOn bootRepackage
}

bootRun {
    jvmArgs = ["-server", "-Xms3g"]
}

mainClassName = 'com.tvntd.trustchain.plugin.TrustChainApp'

springBoot {
    mainClass = 'com.tvntd.trustchain.Application'
}

task runMain() {
    doLast {
        addJvmArgIfEmpty "database.dir", getDatabaseDir("database")
        addJvmArgIfEmpty "sync.fast.enabled", "true"
        addJvmArgIfEmpty "ethereumj.conf.res", "ethereumj.conf"
        addJvmArgIfEmpty "database.name", "database"
        addJvmArgIfEmpty "networkProfile", "main"
        bootRunWithNetworkConfig('main', false)
    }
}

task mineJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Ether Customize Miner',
        'Implementation-Version': '1.0',
        'Main-Class': 'com.tvntd.mine.TrustMinnerApp'
    }
    archiveName = "${baseName}-mine.jar"
    from sourceSets.miner.output
}

task minerRelease(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Ether Customize Miner',
        'Implementation-Version': '1.0',
        'Main-Class': 'com.tvntd.mine.TrustMinnerApp'
    }
    baseName = project.name + '-exe'
    from {
        from sourceSets.miner.output
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    } with jar
}

task appRelease(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Ether Customize Miner',
        'Implementation-Version': '1.0',
        'Main-Class': 'com.tvntd.trustchain.Application'
    }
    baseName = project.name + '-app'
    from {
        from sourceSets.main.output
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    } with jar
}

task miner(type: JavaExec) {
    classpath = sourceSets.miner.runtimeClasspath + sourceSets.main.runtimeClasspath
    main = "com.tvntd.mine.TrustMinnerApp"
    maxHeapSize = "3G"
    args
}

task privNet(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.tvntd.trustchain.TrustChainApp"
    maxHeapSize = "3G"
    jvmArgs = [
    ]
    args = [
    ]
}

artifacts {
    mineJar
}

def getDatabaseDir(String name) {
    return System.getProperty("user.home") + "/DATA/" + name
}

def addJvmArgIfEmpty(String key, String value) {
    boolean hasSystemProperty = System.getProperty(key) != null;
    if (!hasSystemProperty) {
        bootRun.jvmArgs.add('-D' + key + '=' + value)
    }
}

def bootRunWithNetworkConfig(String name, boolean includePresets) {
    def newArgs = []

    if (includePresets) {
        addJvmArgIfEmpty "database.dir", getDatabaseDir("database-" + name)
        newArgs.addAll([
            '-Dethereumj.conf.res=' + name + '.conf',
            '-Ddatabase.name=database-' + name,
            '-DnetworkProfile=' + name]
        )
    }
    // Set heap size configure in task
    //
    if (!project.hasProperty('jvmArgs') || project.jvmArgs.indexOf('-Xmx') == -1) {
        println('Set default heap size for task ' + maxHeapSize)
        newArgs.add(maxHeapSize)
    } else {
        println('Using heap size from user input ' + project.jvmArgs)
    }
    bootRun.jvmArgs.addAll(newArgs)
    println 'Running Java with ' + bootRun.jvmArgs

    tasks.compileJava.execute()
    tasks.bootRun.execute()
}

// jar.dependsOn mineJar

peer.discovery = {

    # If peer discovery is on
    #   The discovery protocol will be used to find other nodes and connect them
    # If peer discovery is off
    #   This peer will only be connecting to the peers from [peer.active] list
    # inbound connections from other peers are accepted as well
    #
    enabled = false

    # List of the seed peers to start the search for online peers
    # values: [ip:port, enode://nodeid@ip:port, ip:port ...]
    #
    ip.list = [
    ]

    # Indicates whether the discovery will include own home node
    # within the list of neighbor nodes
    #
    public.home.node = true

    # Indicates if the discovered nodes and their reputations
    # are stored in DB and persisted between VM restarts
    #
    persist = true

    # The period in seconds with which the discovery
    # tries to reconnect to successful nodes
    # 0 means the nodes are not reconnected
    #
    touchPeriod = 600

    # The maximum nuber of nodes to reconnect to
    # -1 for unlimited
    #
    touchMaxNodes = 100

    # Number of workers that test the peers for being online [1..10]
    #
    workers = 8
}

peer {
    # Port on which ethereumj will listen
    # for incoming connections
    #
    listen.port = 30305

    # Network id
    #
    networkId = 1973

    # Boot node list
    #
    active = [ {
        ip     = localhost
        port   = 30305
        nodeId = 254a002050deb105db55e6465de0bf71263022261e8b879bb015913cf2ae838198c272fd5994d69ae2c5fef705222c1ea3aa0d508bdc20309cf69ca467c691eb
    }, {
        ip     = 10.1.10.12
        port   = 30305
        nodeId = e814e75b391641b33c4ed11f708f0531f66ebf41b7be5d6d8b05e3905235fa5aefa0a06ac722b3551db847d8ba36e409eef2ab24328449db4d0c2dffdd05f03e
    }, {
        ip     = 10.1.10.11
        port   = 30305
        nodeId = c50414374d41a8a2325ad8b512b4f4713d9f1d68f061abb32d851a0fa60fad84599cbd134c475cf5cba448982bb8b52d3c32ef8a972e93b71b843fc3f749d278
    } ]

    # List of trusted peers from which incoming connections are always accepted
    #
    trusted = [ {
        nodeId = 254a002050deb105db55e6465de0bf71263022261e8b879bb015913cf2ae838198c272fd5994d69ae2c5fef705222c1ea3aa0d508bdc20309cf69ca467c691eb
    }, {
        nodeId = e814e75b391641b33c4ed11f708f0531f66ebf41b7be5d6d8b05e3905235fa5aefa0a06ac722b3551db847d8ba36e409eef2ab24328449db4d0c2dffdd05f03e
    }, {
        nodeId = c50414374d41a8a2325ad8b512b4f4713d9f1d68f061abb32d851a0fa60fad84599cbd134c475cf5cba448982bb8b52d3c32ef8a972e93b71b843fc3f749d278
    } ]

    # Max number of active peers our node will maintain extra peers trying
    # to connect us will be dropped with TOO_MANY_PEERS message the incoming
    # connection from the peer matching 'peer.trusted' entry is always accepted
    #
    maxActivePeers = 30

    # The protocols supported by peer can be: [eth, shh, bzz]
    #
    capabilities = [eth]

    # Connection timeout for trying to connect to a peer [seconds]
    #
    connection.timeout = 2

    # How much time [seconds] we will wait for a message to arrive
    # before closing the channel
    #
    channel.read.timeout = 90

    p2p {
        # The default version outbound connections are made with
        # inbound connections are made with the version declared by the
        # remote peer (if supported)
        #
        # version = 4

        # Max frame size in bytes when framing is enabled
        #
        framing.maxSize = 32768

        # Forces peer to send Handshake message in format defined by EIP-8,
        # see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-8.md
        #
        eip8 = true
    }
}

# The folder resources/genesis contains several versions of genesis configuration
# according to the network the peer will run on
#
genesis = private-genesis.json

# Path to genesis file has priority over `genesis` option
#
# genesisFile = /some/path/to/frontier.json

# This is a more advanced replacement for 'blockchain.config.name'
# Here the exact org.ethereum.config.BlockchainForkConfig implementation
# class name can be specified.
# Only one of two options (this and above) can be defined.
#
blockchain.config.class = "org.ethereum.config.blockchain.HomesteadConfig"

# Cache settings
#
cache {
    flush {
        # Size in Mbytes of the write buffer for all datasources
        # (state, blocks, transactions) data is flushed to DB when write caches
        # size exceeds this limit value < 0 disables this option
        #
        writeCacheSize = 64

        # Force data flush each N blocks [10000 flush each 10000 blocks]
        # value 0 disables this option
        #
        blocks = 0

        # Flush each block after full (long) sync complete
        #
        shortSyncFlush = true
    }

    # Total size in Mbytes of the state DB read cache
    #
    stateCacheSize = 256

    # The size of block queue cache to be imported in MBytes
    #
    blockQueueSize = 32

    # The size of header queue cache during import in MBytes
    #
    headerQueueSize = 8

    # Maximum size (in Mb) the state bloom fiter can grow up to when reaching this
    # threshold the bloom filter is turned off forever 128M can manage approx up to
    # 50M of db entries
    #
    maxStateBloomSize = 128
}

# eth sync process
sync {
    # Block chain synchronization can be: [true/false]
    #
    enabled = true

    # Fast sync options
    #
    fast {
        # Enables/disables fastsync when enabling make sure the global sync option
        # is enabled ('sync.enabled')
        #
        enabled = false

        # When specified the fastsync retrieves the state for this block
        # This is the fast and secure option to do fastsync
        # If not specified the block is selected like [peerBestBlockNumber - 1000]
        #
        # pivotBlockHash = 
    }

    # Minimal peers count used in sync process sync may use more peers
    # than this value but will try to get at least this many from discovery
    #
    peer.count = 1

    # Uncomment this param to use a strict Eth version.  Useful for testing
    #
    # version = 62

    # Exit if we receive a block that causes state conflict this option is
    # mainly for debugging purposes
    #
    exitOnBlockConflict = false
}

# Solidity options
#
solc {
    # Full path to solc executable
    # If path is not provided, bundled Solidity Compiler is used
    #
    path = null
}
